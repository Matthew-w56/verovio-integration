// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Verovio C Library wrapper for Dart
class VerovioWrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  VerovioWrapper(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  VerovioWrapper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Methods exported a functions to use the Toolkit class
  void enableLog(
    bool value,
  ) {
    return _enableLog(
      value,
    );
  }

  late final _enableLogPtr =
      _lookup<ffi.NativeFunction<NativeEnableLog>>('enableLog');
  late final _enableLog = _enableLogPtr.asFunction<DartEnableLog>();

  void enableLogToBuffer(
    bool value,
  ) {
    return _enableLogToBuffer(
      value,
    );
  }

  late final _enableLogToBufferPtr =
      _lookup<ffi.NativeFunction<NativeEnableLogToBuffer>>('enableLogToBuffer');
  late final _enableLogToBuffer =
      _enableLogToBufferPtr.asFunction<DartEnableLogToBuffer>();

  ffi.Pointer<ffi.Void> vrvToolkit_constructor() {
    return _vrvToolkit_constructor();
  }

  late final _vrvToolkit_constructorPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_constructor>>(
          'vrvToolkit_constructor');
  late final _vrvToolkit_constructor =
      _vrvToolkit_constructorPtr.asFunction<DartVrvToolkit_constructor>();

  ffi.Pointer<ffi.Void> vrvToolkit_constructorResourcePath(
    ffi.Pointer<ffi.Char> resourcePath,
  ) {
    return _vrvToolkit_constructorResourcePath(
      resourcePath,
    );
  }

  late final _vrvToolkit_constructorResourcePathPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_constructorResourcePath>>(
          'vrvToolkit_constructorResourcePath');
  late final _vrvToolkit_constructorResourcePath =
      _vrvToolkit_constructorResourcePathPtr
          .asFunction<DartVrvToolkit_constructorResourcePath>();

  void vrvToolkit_destructor(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_destructor(
      tkPtr,
    );
  }

  late final _vrvToolkit_destructorPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_destructor>>(
          'vrvToolkit_destructor');
  late final _vrvToolkit_destructor =
      _vrvToolkit_destructorPtr.asFunction<DartVrvToolkit_destructor>();

  bool vrvToolkit_edit(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> editorAction,
  ) {
    return _vrvToolkit_edit(
      tkPtr,
      editorAction,
    );
  }

  late final _vrvToolkit_editPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_edit>>('vrvToolkit_edit');
  late final _vrvToolkit_edit =
      _vrvToolkit_editPtr.asFunction<DartVrvToolkit_edit>();

  ffi.Pointer<ffi.Char> vrvToolkit_editInfo(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_editInfo(
      tkPtr,
    );
  }

  late final _vrvToolkit_editInfoPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_editInfo>>(
          'vrvToolkit_editInfo');
  late final _vrvToolkit_editInfo =
      _vrvToolkit_editInfoPtr.asFunction<DartVrvToolkit_editInfo>();

  ffi.Pointer<ffi.Char> vrvToolkit_getAvailableOptions(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getAvailableOptions(
      tkPtr,
    );
  }

  late final _vrvToolkit_getAvailableOptionsPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getAvailableOptions>>(
          'vrvToolkit_getAvailableOptions');
  late final _vrvToolkit_getAvailableOptions =
      _vrvToolkit_getAvailableOptionsPtr
          .asFunction<DartVrvToolkit_getAvailableOptions>();

  ffi.Pointer<ffi.Char> vrvToolkit_getDefaultOptions(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getDefaultOptions(
      tkPtr,
    );
  }

  late final _vrvToolkit_getDefaultOptionsPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getDefaultOptions>>(
          'vrvToolkit_getDefaultOptions');
  late final _vrvToolkit_getDefaultOptions = _vrvToolkit_getDefaultOptionsPtr
      .asFunction<DartVrvToolkit_getDefaultOptions>();

  ffi.Pointer<ffi.Char> vrvToolkit_getDescriptiveFeatures(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> options,
  ) {
    return _vrvToolkit_getDescriptiveFeatures(
      tkPtr,
      options,
    );
  }

  late final _vrvToolkit_getDescriptiveFeaturesPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getDescriptiveFeatures>>(
          'vrvToolkit_getDescriptiveFeatures');
  late final _vrvToolkit_getDescriptiveFeatures =
      _vrvToolkit_getDescriptiveFeaturesPtr
          .asFunction<DartVrvToolkit_getDescriptiveFeatures>();

  ffi.Pointer<ffi.Char> vrvToolkit_getElementAttr(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getElementAttr(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getElementAttrPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getElementAttr>>(
          'vrvToolkit_getElementAttr');
  late final _vrvToolkit_getElementAttr =
      _vrvToolkit_getElementAttrPtr.asFunction<DartVrvToolkit_getElementAttr>();

  ffi.Pointer<ffi.Char> vrvToolkit_getElementsAtTime(
    ffi.Pointer<ffi.Void> tkPtr,
    int millisec,
  ) {
    return _vrvToolkit_getElementsAtTime(
      tkPtr,
      millisec,
    );
  }

  late final _vrvToolkit_getElementsAtTimePtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getElementsAtTime>>(
          'vrvToolkit_getElementsAtTime');
  late final _vrvToolkit_getElementsAtTime = _vrvToolkit_getElementsAtTimePtr
      .asFunction<DartVrvToolkit_getElementsAtTime>();

  ffi.Pointer<ffi.Char> vrvToolkit_getExpansionIdsForElement(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getExpansionIdsForElement(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getExpansionIdsForElementPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getExpansionIdsForElement>>(
          'vrvToolkit_getExpansionIdsForElement');
  late final _vrvToolkit_getExpansionIdsForElement =
      _vrvToolkit_getExpansionIdsForElementPtr
          .asFunction<DartVrvToolkit_getExpansionIdsForElement>();

  ffi.Pointer<ffi.Char> vrvToolkit_getHumdrum(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getHumdrum(
      tkPtr,
    );
  }

  late final _vrvToolkit_getHumdrumPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getHumdrum>>(
          'vrvToolkit_getHumdrum');
  late final _vrvToolkit_getHumdrum =
      _vrvToolkit_getHumdrumPtr.asFunction<DartVrvToolkit_getHumdrum>();

  ffi.Pointer<ffi.Char> vrvToolkit_convertHumdrumToHumdrum(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> humdrumData,
  ) {
    return _vrvToolkit_convertHumdrumToHumdrum(
      tkPtr,
      humdrumData,
    );
  }

  late final _vrvToolkit_convertHumdrumToHumdrumPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_convertHumdrumToHumdrum>>(
          'vrvToolkit_convertHumdrumToHumdrum');
  late final _vrvToolkit_convertHumdrumToHumdrum =
      _vrvToolkit_convertHumdrumToHumdrumPtr
          .asFunction<DartVrvToolkit_convertHumdrumToHumdrum>();

  ffi.Pointer<ffi.Char> vrvToolkit_convertHumdrumToMIDI(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> humdrumData,
  ) {
    return _vrvToolkit_convertHumdrumToMIDI(
      tkPtr,
      humdrumData,
    );
  }

  late final _vrvToolkit_convertHumdrumToMIDIPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_convertHumdrumToMIDI>>(
          'vrvToolkit_convertHumdrumToMIDI');
  late final _vrvToolkit_convertHumdrumToMIDI =
      _vrvToolkit_convertHumdrumToMIDIPtr
          .asFunction<DartVrvToolkit_convertHumdrumToMIDI>();

  ffi.Pointer<ffi.Char> vrvToolkit_convertMEIToHumdrum(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> meiData,
  ) {
    return _vrvToolkit_convertMEIToHumdrum(
      tkPtr,
      meiData,
    );
  }

  late final _vrvToolkit_convertMEIToHumdrumPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_convertMEIToHumdrum>>(
          'vrvToolkit_convertMEIToHumdrum');
  late final _vrvToolkit_convertMEIToHumdrum =
      _vrvToolkit_convertMEIToHumdrumPtr
          .asFunction<DartVrvToolkit_convertMEIToHumdrum>();

  ffi.Pointer<ffi.Char> vrvToolkit_getLog(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getLog(
      tkPtr,
    );
  }

  late final _vrvToolkit_getLogPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getLog>>('vrvToolkit_getLog');
  late final _vrvToolkit_getLog =
      _vrvToolkit_getLogPtr.asFunction<DartVrvToolkit_getLog>();

  ffi.Pointer<ffi.Char> vrvToolkit_getMEI(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> options,
  ) {
    return _vrvToolkit_getMEI(
      tkPtr,
      options,
    );
  }

  late final _vrvToolkit_getMEIPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getMEI>>('vrvToolkit_getMEI');
  late final _vrvToolkit_getMEI =
      _vrvToolkit_getMEIPtr.asFunction<DartVrvToolkit_getMEI>();

  ffi.Pointer<ffi.Char> vrvToolkit_getMIDIValuesForElement(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getMIDIValuesForElement(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getMIDIValuesForElementPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getMIDIValuesForElement>>(
          'vrvToolkit_getMIDIValuesForElement');
  late final _vrvToolkit_getMIDIValuesForElement =
      _vrvToolkit_getMIDIValuesForElementPtr
          .asFunction<DartVrvToolkit_getMIDIValuesForElement>();

  ffi.Pointer<ffi.Char> vrvToolkit_getNotatedIdForElement(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getNotatedIdForElement(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getNotatedIdForElementPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getNotatedIdForElement>>(
          'vrvToolkit_getNotatedIdForElement');
  late final _vrvToolkit_getNotatedIdForElement =
      _vrvToolkit_getNotatedIdForElementPtr
          .asFunction<DartVrvToolkit_getNotatedIdForElement>();

  ffi.Pointer<ffi.Char> vrvToolkit_getOptions(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getOptions(
      tkPtr,
    );
  }

  late final _vrvToolkit_getOptionsPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getOptions>>(
          'vrvToolkit_getOptions');
  late final _vrvToolkit_getOptions =
      _vrvToolkit_getOptionsPtr.asFunction<DartVrvToolkit_getOptions>();

  ffi.Pointer<ffi.Char> vrvToolkit_getOptionUsageString(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getOptionUsageString(
      tkPtr,
    );
  }

  late final _vrvToolkit_getOptionUsageStringPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getOptionUsageString>>(
          'vrvToolkit_getOptionUsageString');
  late final _vrvToolkit_getOptionUsageString =
      _vrvToolkit_getOptionUsageStringPtr
          .asFunction<DartVrvToolkit_getOptionUsageString>();

  int vrvToolkit_getPageCount(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getPageCount(
      tkPtr,
    );
  }

  late final _vrvToolkit_getPageCountPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getPageCount>>(
          'vrvToolkit_getPageCount');
  late final _vrvToolkit_getPageCount =
      _vrvToolkit_getPageCountPtr.asFunction<DartVrvToolkit_getPageCount>();

  int vrvToolkit_getPageWithElement(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getPageWithElement(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getPageWithElementPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getPageWithElement>>(
          'vrvToolkit_getPageWithElement');
  late final _vrvToolkit_getPageWithElement = _vrvToolkit_getPageWithElementPtr
      .asFunction<DartVrvToolkit_getPageWithElement>();

  double vrvToolkit_getTimeForElement(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> xmlId,
  ) {
    return _vrvToolkit_getTimeForElement(
      tkPtr,
      xmlId,
    );
  }

  late final _vrvToolkit_getTimeForElementPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getTimeForElement>>(
          'vrvToolkit_getTimeForElement');
  late final _vrvToolkit_getTimeForElement = _vrvToolkit_getTimeForElementPtr
      .asFunction<DartVrvToolkit_getTimeForElement>();

  ffi.Pointer<ffi.Char> vrvToolkit_getVersion(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_getVersion(
      tkPtr,
    );
  }

  late final _vrvToolkit_getVersionPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_getVersion>>(
          'vrvToolkit_getVersion');
  late final _vrvToolkit_getVersion =
      _vrvToolkit_getVersionPtr.asFunction<DartVrvToolkit_getVersion>();

  bool vrvToolkit_loadData(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _vrvToolkit_loadData(
      tkPtr,
      data,
    );
  }

  late final _vrvToolkit_loadDataPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_loadData>>(
          'vrvToolkit_loadData');
  late final _vrvToolkit_loadData =
      _vrvToolkit_loadDataPtr.asFunction<DartVrvToolkit_loadData>();

  bool vrvToolkit_loadZipDataBase64(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _vrvToolkit_loadZipDataBase64(
      tkPtr,
      data,
    );
  }

  late final _vrvToolkit_loadZipDataBase64Ptr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_loadZipDataBase64>>(
          'vrvToolkit_loadZipDataBase64');
  late final _vrvToolkit_loadZipDataBase64 = _vrvToolkit_loadZipDataBase64Ptr
      .asFunction<DartVrvToolkit_loadZipDataBase64>();

  bool vrvToolkit_loadZipDataBuffer(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length,
  ) {
    return _vrvToolkit_loadZipDataBuffer(
      tkPtr,
      data,
      length,
    );
  }

  late final _vrvToolkit_loadZipDataBufferPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_loadZipDataBuffer>>(
          'vrvToolkit_loadZipDataBuffer');
  late final _vrvToolkit_loadZipDataBuffer = _vrvToolkit_loadZipDataBufferPtr
      .asFunction<DartVrvToolkit_loadZipDataBuffer>();

  void vrvToolkit_redoLayout(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> c_options,
  ) {
    return _vrvToolkit_redoLayout(
      tkPtr,
      c_options,
    );
  }

  late final _vrvToolkit_redoLayoutPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_redoLayout>>(
          'vrvToolkit_redoLayout');
  late final _vrvToolkit_redoLayout =
      _vrvToolkit_redoLayoutPtr.asFunction<DartVrvToolkit_redoLayout>();

  void vrvToolkit_redoPagePitchPosLayout(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_redoPagePitchPosLayout(
      tkPtr,
    );
  }

  late final _vrvToolkit_redoPagePitchPosLayoutPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_redoPagePitchPosLayout>>(
          'vrvToolkit_redoPagePitchPosLayout');
  late final _vrvToolkit_redoPagePitchPosLayout =
      _vrvToolkit_redoPagePitchPosLayoutPtr
          .asFunction<DartVrvToolkit_redoPagePitchPosLayout>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderData(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> options,
  ) {
    return _vrvToolkit_renderData(
      tkPtr,
      data,
      options,
    );
  }

  late final _vrvToolkit_renderDataPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderData>>(
          'vrvToolkit_renderData');
  late final _vrvToolkit_renderData =
      _vrvToolkit_renderDataPtr.asFunction<DartVrvToolkit_renderData>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderToExpansionMap(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_renderToExpansionMap(
      tkPtr,
    );
  }

  late final _vrvToolkit_renderToExpansionMapPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderToExpansionMap>>(
          'vrvToolkit_renderToExpansionMap');
  late final _vrvToolkit_renderToExpansionMap =
      _vrvToolkit_renderToExpansionMapPtr
          .asFunction<DartVrvToolkit_renderToExpansionMap>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderToMIDI(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> c_options,
  ) {
    return _vrvToolkit_renderToMIDI(
      tkPtr,
      c_options,
    );
  }

  late final _vrvToolkit_renderToMIDIPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderToMIDI>>(
          'vrvToolkit_renderToMIDI');
  late final _vrvToolkit_renderToMIDI =
      _vrvToolkit_renderToMIDIPtr.asFunction<DartVrvToolkit_renderToMIDI>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderToPAE(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_renderToPAE(
      tkPtr,
    );
  }

  late final _vrvToolkit_renderToPAEPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderToPAE>>(
          'vrvToolkit_renderToPAE');
  late final _vrvToolkit_renderToPAE =
      _vrvToolkit_renderToPAEPtr.asFunction<DartVrvToolkit_renderToPAE>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderToSVG(
    ffi.Pointer<ffi.Void> tkPtr,
    int page_no,
    bool xmlDeclaration,
  ) {
    return _vrvToolkit_renderToSVG(
      tkPtr,
      page_no,
      xmlDeclaration,
    );
  }

  late final _vrvToolkit_renderToSVGPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderToSVG>>(
          'vrvToolkit_renderToSVG');
  late final _vrvToolkit_renderToSVG =
      _vrvToolkit_renderToSVGPtr.asFunction<DartVrvToolkit_renderToSVG>();

  ffi.Pointer<ffi.Char> vrvToolkit_renderToTimemap(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> c_options,
  ) {
    return _vrvToolkit_renderToTimemap(
      tkPtr,
      c_options,
    );
  }

  late final _vrvToolkit_renderToTimemapPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_renderToTimemap>>(
          'vrvToolkit_renderToTimemap');
  late final _vrvToolkit_renderToTimemap = _vrvToolkit_renderToTimemapPtr
      .asFunction<DartVrvToolkit_renderToTimemap>();

  void vrvToolkit_resetOptions(
    ffi.Pointer<ffi.Void> tkPtr,
  ) {
    return _vrvToolkit_resetOptions(
      tkPtr,
    );
  }

  late final _vrvToolkit_resetOptionsPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_resetOptions>>(
          'vrvToolkit_resetOptions');
  late final _vrvToolkit_resetOptions =
      _vrvToolkit_resetOptionsPtr.asFunction<DartVrvToolkit_resetOptions>();

  void vrvToolkit_resetXmlIdSeed(
    ffi.Pointer<ffi.Void> tkPtr,
    int seed,
  ) {
    return _vrvToolkit_resetXmlIdSeed(
      tkPtr,
      seed,
    );
  }

  late final _vrvToolkit_resetXmlIdSeedPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_resetXmlIdSeed>>(
          'vrvToolkit_resetXmlIdSeed');
  late final _vrvToolkit_resetXmlIdSeed =
      _vrvToolkit_resetXmlIdSeedPtr.asFunction<DartVrvToolkit_resetXmlIdSeed>();

  bool vrvToolkit_select(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> selection,
  ) {
    return _vrvToolkit_select(
      tkPtr,
      selection,
    );
  }

  late final _vrvToolkit_selectPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_select>>('vrvToolkit_select');
  late final _vrvToolkit_select =
      _vrvToolkit_selectPtr.asFunction<DartVrvToolkit_select>();

  bool vrvToolkit_setOptions(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> options,
  ) {
    return _vrvToolkit_setOptions(
      tkPtr,
      options,
    );
  }

  late final _vrvToolkit_setOptionsPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_setOptions>>(
          'vrvToolkit_setOptions');
  late final _vrvToolkit_setOptions =
      _vrvToolkit_setOptionsPtr.asFunction<DartVrvToolkit_setOptions>();

  ffi.Pointer<ffi.Char> vrvToolkit_validatePAE(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _vrvToolkit_validatePAE(
      tkPtr,
      data,
    );
  }

  late final _vrvToolkit_validatePAEPtr =
      _lookup<ffi.NativeFunction<NativeVrvToolkit_validatePAE>>(
          'vrvToolkit_validatePAE');
  late final _vrvToolkit_validatePAE =
      _vrvToolkit_validatePAEPtr.asFunction<DartVrvToolkit_validatePAE>();
}

typedef NativeEnableLog = ffi.Void Function(ffi.Bool value);
typedef DartEnableLog = void Function(bool value);
typedef NativeEnableLogToBuffer = ffi.Void Function(ffi.Bool value);
typedef DartEnableLogToBuffer = void Function(bool value);
typedef NativeVrvToolkit_constructor = ffi.Pointer<ffi.Void> Function();
typedef DartVrvToolkit_constructor = ffi.Pointer<ffi.Void> Function();
typedef NativeVrvToolkit_constructorResourcePath = ffi.Pointer<ffi.Void>
    Function(ffi.Pointer<ffi.Char> resourcePath);
typedef DartVrvToolkit_constructorResourcePath = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> resourcePath);
typedef NativeVrvToolkit_destructor = ffi.Void Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_destructor = void Function(ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_edit = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> editorAction);
typedef DartVrvToolkit_edit = bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> editorAction);
typedef NativeVrvToolkit_editInfo = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_editInfo = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getAvailableOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getAvailableOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getDefaultOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getDefaultOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getDescriptiveFeatures = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef DartVrvToolkit_getDescriptiveFeatures = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef NativeVrvToolkit_getElementAttr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getElementAttr = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getElementsAtTime = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Int millisec);
typedef DartVrvToolkit_getElementsAtTime = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, int millisec);
typedef NativeVrvToolkit_getExpansionIdsForElement = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getExpansionIdsForElement = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getHumdrum = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getHumdrum = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_convertHumdrumToHumdrum = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> humdrumData);
typedef DartVrvToolkit_convertHumdrumToHumdrum = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> humdrumData);
typedef NativeVrvToolkit_convertHumdrumToMIDI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> humdrumData);
typedef DartVrvToolkit_convertHumdrumToMIDI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> humdrumData);
typedef NativeVrvToolkit_convertMEIToHumdrum = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> meiData);
typedef DartVrvToolkit_convertMEIToHumdrum = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> meiData);
typedef NativeVrvToolkit_getLog = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getLog = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getMEI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef DartVrvToolkit_getMEI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef NativeVrvToolkit_getMIDIValuesForElement = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getMIDIValuesForElement = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getNotatedIdForElement = ffi.Pointer<ffi.Char>
    Function(ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getNotatedIdForElement = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getOptions = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getOptionUsageString = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getOptionUsageString = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getPageCount = ffi.Int Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getPageCount = int Function(ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_getPageWithElement = ffi.Int Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getPageWithElement = int Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getTimeForElement = ffi.Double Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef DartVrvToolkit_getTimeForElement = double Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> xmlId);
typedef NativeVrvToolkit_getVersion = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_getVersion = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_loadData = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
typedef DartVrvToolkit_loadData = bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
typedef NativeVrvToolkit_loadZipDataBase64 = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
typedef DartVrvToolkit_loadZipDataBase64 = bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
typedef NativeVrvToolkit_loadZipDataBuffer = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.Int length);
typedef DartVrvToolkit_loadZipDataBuffer = bool Function(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length);
typedef NativeVrvToolkit_redoLayout = ffi.Void Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef DartVrvToolkit_redoLayout = void Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef NativeVrvToolkit_redoPagePitchPosLayout = ffi.Void Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_redoPagePitchPosLayout = void Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_renderData = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> options);
typedef DartVrvToolkit_renderData = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> options);
typedef NativeVrvToolkit_renderToExpansionMap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_renderToExpansionMap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_renderToMIDI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef DartVrvToolkit_renderToMIDI = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef NativeVrvToolkit_renderToPAE = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_renderToPAE = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_renderToSVG = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Int page_no, ffi.Bool xmlDeclaration);
typedef DartVrvToolkit_renderToSVG = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, int page_no, bool xmlDeclaration);
typedef NativeVrvToolkit_renderToTimemap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef DartVrvToolkit_renderToTimemap = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> c_options);
typedef NativeVrvToolkit_resetOptions = ffi.Void Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef DartVrvToolkit_resetOptions = void Function(
    ffi.Pointer<ffi.Void> tkPtr);
typedef NativeVrvToolkit_resetXmlIdSeed = ffi.Void Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Int seed);
typedef DartVrvToolkit_resetXmlIdSeed = void Function(
    ffi.Pointer<ffi.Void> tkPtr, int seed);
typedef NativeVrvToolkit_select = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> selection);
typedef DartVrvToolkit_select = bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> selection);
typedef NativeVrvToolkit_setOptions = ffi.Bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef DartVrvToolkit_setOptions = bool Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> options);
typedef NativeVrvToolkit_validatePAE = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
typedef DartVrvToolkit_validatePAE = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Void> tkPtr, ffi.Pointer<ffi.Char> data);
